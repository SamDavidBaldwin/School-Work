// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str; 
    field int strLength; 
    field int strMaxLength;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let str = Array.new(maxLength);
        let strMaxLength =  maxLength; 
        let strLength = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return strLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(strLength < strMaxLength){
            let str[strLength] = c;
            let strLength = strLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(strLength > 0){
            let strLength = strLength - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int retVal, i, c, consecutive;
		var boolean negative;
		let retVal = 0;
		let i = 0;
		let consecutive = 1;
		if(str[0] = 45){
			let negative = true;
			let i = 1;
		}
		while((i<strLength) & (consecutive=1)){
			let c = str[i] - 48; 
			if((c > -1) & (c < 10)){
				let retVal = (retVal*10) + c; 
			}
			else{
				let consecutive = 0; 
			}
			let i = i + 1;
		}
		if(negative){
			return -retVal;
		}
		else{
			return retVal;
		}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, n;
		var int c;
		if(val < 0){
			do appendChar(45);
			let val = -val;
		}
		let n = val / 10;
		let lastDigit = val - (n*10); 
		let c = lastDigit + 48;
		if(val < 10){
			do appendChar(c);
		}
		else{
			do setInt(n);
			do appendChar(c);
		}
		return;
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }


    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
