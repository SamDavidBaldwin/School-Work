// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static Array twoPow;
    static boolean color; 

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
		let color = true;
        let twoPow = Array.new(16);
		let twoPow[0] = 1;
		let twoPow[1] = 2;
		let twoPow[2] = 4;
		let twoPow[3] = 8;
		let twoPow[4] = 16;
		let twoPow[5] = 32;
		let twoPow[6] = 64;
		let twoPow[7] = 128;
		let twoPow[8] = 256;
		let twoPow[9] = 512;
		let twoPow[10] = 1024;
		let twoPow[11] = 2048;
		let twoPow[12] = 4096;
		let twoPow[13] = 8192;
		let twoPow[14] = 16384;
		let twoPow[15] = 16384 + 16384;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
		let i = 0;
		while(i<8192){
			let screen[i] = 0;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b; 
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
       var int row, col, bit, address, value;

		let bit = x - ((x / 16) * 16); 

		let address = 16384 + (y * 32) + (x / 16);

		let value = Memory.peek(address);

		if (color) {  
			let value = value | twoPow[bit];
		} else {    
			let value = value & ~twoPow[bit];
		}

		do Memory.poke(address, value);

		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		 var int a, b, a_inc, b_inc, dx, dy, criterion, temp;

    if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255) |
        (x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)) {
      do Sys.error(8); // Screen.drawLine: Illegal line coordinates
    }

    let a = 0;
    let b = 0;

    if (~(x1 < x2)) {
      let temp = x1;
      let x1 = x2;
      let x2 = temp;

      let temp = y1;
      let y1 = y2;
      let y2 = temp;
    }

    let dx = x2 - x1;
    let dy = y2 - y1;

    // do Screen.drawPixel(a, b);

    if (dy < 0) {
      let b_inc = -1;
    } else {
      let b_inc = 1;
    }

    if (dy = 0) {
      while (~(a = dx)) {
        let a = a + 1;
        do Screen.drawPixel(x1 + a, y1);
      }

      return;
    }

    if (dx = 0) {
      while (~(b = dy)) {
        let b = b + b_inc;
        do Screen.drawPixel(x1, y1 + b);
      }

      return;
    }

    while ((a < dx) & (b < dy)) {
      let criterion = (a * dy) - (b * dx);

      if (criterion < 0) {
        let a = a + 1;
      } else {
        let b = b + 1;
      }

      do Screen.drawPixel(x1 + a, y1 + b);
    }

    while ((a < dx) & (b > dy)) {
      let criterion = (a * dy) - (b * dx);

      if (criterion > 0) {
        let a = a + 1;
      } else {
        let b = b - 1;
      }

      do Screen.drawPixel(x1 + a, y1 + b);
    }

    return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;
		let dy = y1;
		do Screen.drawLine(x1, dy, x2, dy);
		while(~(dy=y2))
		{
			let dy = dy+1;
			do Screen.drawLine(x1, dy, x2, dy);
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
		var int r_squared;
		let dy=-r;
		let r_squared = r*r;
		while(~(dy>r))
		{
			let dx = Math.sqrt(r_squared-(dy*dy));
			do Screen.drawLine(x-dx,y+dy,x+dx,y+dy);
			let dy = dy+1;
		}
		return;
    }
}
